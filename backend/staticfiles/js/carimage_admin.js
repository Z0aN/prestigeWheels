// JavaScript –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ drag&drop –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω–∫–µ

document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    initializeImageFields();
    
    // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö inline —Ñ–æ—Ä–º
    document.addEventListener('click', function(e) {
        if (e.target && e.target.classList.contains('add-row')) {
            setTimeout(initializeImageFields, 100);
        }
    });
});

function initializeImageFields() {
    const imageFields = document.querySelectorAll('input[type="file"][accept*="image"]');
    
    imageFields.forEach(function(field) {
        if (field.dataset.initialized) return;
        field.dataset.initialized = 'true';
        
        setupImagePreview(field);
        setupDragAndDrop(field);
    });
}

function setupImagePreview(fileInput) {
    const container = fileInput.closest('.field-image, .form-row');
    if (!container) return;
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    let previewContainer = container.querySelector('.carimage-preview-container');
    if (!previewContainer) {
        previewContainer = document.createElement('div');
        previewContainer.className = 'carimage-preview-container';
        fileInput.parentNode.appendChild(previewContainer);
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    let previewImg = previewContainer.querySelector('.carimage-preview');
    if (!previewImg) {
        previewImg = document.createElement('img');
        previewImg.className = 'carimage-preview';
        previewImg.alt = '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
        previewContainer.appendChild(previewImg);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const existingImageLink = container.querySelector('a[href*="/media/"]');
    if (existingImageLink && !previewImg.src) {
        previewImg.src = existingImageLink.href;
        previewImg.classList.add('show');
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
    fileInput.addEventListener('change', function() {
        handleFileSelect(this, previewImg);
    });
}

function setupDragAndDrop(fileInput) {
    const container = fileInput.closest('.field-image, .form-row');
    if (!container) return;
    
    // –°–æ–∑–¥–∞–µ–º –∑–æ–Ω—É drag&drop
    let dropZone = container.querySelector('.carimage-drop-zone');
    if (!dropZone) {
        dropZone = document.createElement('div');
        dropZone.className = 'carimage-drop-zone';
        dropZone.innerHTML = `
            <div class="drop-icon">üìÅ</div>
            <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—é–¥–∞ –∏–ª–∏ <strong>–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</strong></p>
            <p style="font-size: 12px; margin-top: 5px;">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPEG, PNG, GIF (–¥–æ 5MB)</p>
        `;
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º input –≤–Ω—É—Ç—Ä—å dropZone
        dropZone.appendChild(fileInput);
        container.appendChild(dropZone);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ drag&drop
    dropZone.addEventListener('dragover', function(e) {
        e.preventDefault();
        e.stopPropagation();
        this.classList.add('dragover');
    });
    
    dropZone.addEventListener('dragleave', function(e) {
        e.preventDefault();
        e.stopPropagation();
        this.classList.remove('dragover');
    });
    
    dropZone.addEventListener('drop', function(e) {
        e.preventDefault();
        e.stopPropagation();
        this.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleDroppedFiles(fileInput, files);
        }
    });
    
    // –ö–ª–∏–∫ –ø–æ –∑–æ–Ω–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    dropZone.addEventListener('click', function(e) {
        if (e.target !== fileInput) {
            fileInput.click();
        }
    });
}

function handleFileSelect(fileInput, previewImg) {
    const file = fileInput.files[0];
    if (!file) {
        previewImg.classList.remove('show');
        clearFileInfo(fileInput);
        return;
    }
    
    if (!validateFile(file, fileInput)) {
        fileInput.value = '';
        previewImg.classList.remove('show');
        return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    const reader = new FileReader();
    reader.onload = function(e) {
        previewImg.src = e.target.result;
        previewImg.classList.add('show');
    };
    reader.readAsDataURL(file);
    
    showFileInfo(fileInput, file);
}

function handleDroppedFiles(fileInput, files) {
    if (files.length === 0) return;
    
    const file = files[0]; // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
    
    if (!validateFile(file, fileInput)) {
        return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π FileList —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–æ–º
    const dt = new DataTransfer();
    dt.items.add(file);
    fileInput.files = dt.files;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–∫ –ø—Ä–∏ –æ–±—ã—á–Ω–æ–º –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–∞
    const event = new Event('change', { bubbles: true });
    fileInput.dispatchEvent(event);
}

function validateFile(file, fileInput) {
    const maxSize = 5 * 1024 * 1024; // 5MB
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif'];
    
    clearFileInfo(fileInput);
    
    if (!allowedTypes.includes(file.type)) {
        showError(fileInput, '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, GIF');
        return false;
    }
    
    if (file.size > maxSize) {
        showError(fileInput, '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
        return false;
    }
    
    return true;
}

function showFileInfo(fileInput, file) {
    const container = fileInput.closest('.carimage-drop-zone, .form-row');
    if (!container) return;
    
    clearFileInfo(fileInput);
    
    const infoDiv = document.createElement('div');
    infoDiv.className = 'carimage-file-info';
    infoDiv.innerHTML = `
        <strong>–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:</strong> ${file.name}<br>
        <strong>–†–∞–∑–º–µ—Ä:</strong> ${formatFileSize(file.size)}<br>
        <strong>–¢–∏–ø:</strong> ${file.type}
    `;
    
    container.appendChild(infoDiv);
}

function showError(fileInput, message) {
    const container = fileInput.closest('.carimage-drop-zone, .form-row');
    if (!container) return;
    
    const errorDiv = document.createElement('div');
    errorDiv.className = 'carimage-error';
    errorDiv.textContent = message;
    
    container.appendChild(errorDiv);
}

function clearFileInfo(fileInput) {
    const container = fileInput.closest('.carimage-drop-zone, .form-row');
    if (!container) return;
    
    const existingInfo = container.querySelectorAll('.carimage-file-info, .carimage-error');
    existingInfo.forEach(el => el.remove());
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ –±—É–¥—É—â–µ–º)
function setupMultiplePreview(fileInput) {
    fileInput.addEventListener('change', function() {
        const container = this.closest('.form-row');
        if (!container) return;
        
        let previewContainer = container.querySelector('.carimage-multiple-preview');
        if (!previewContainer) {
            previewContainer = document.createElement('div');
            previewContainer.className = 'carimage-multiple-preview';
            container.appendChild(previewContainer);
        }
        
        previewContainer.innerHTML = '';
        
        Array.from(this.files).forEach(function(file) {
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const img = document.createElement('img');
                    img.src = e.target.result;
                    img.title = file.name;
                    previewContainer.appendChild(img);
                };
                reader.readAsDataURL(file);
            }
        });
    });
} 